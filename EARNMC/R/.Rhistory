library(EARNMC)
numBurnInBatches =  1000
convergenceCriterion =  1.02
convergenceSampleSize = 100000
convergenceBatchSize = 100000
minimumSamples =  3000000
extraR0Iterations = 500
extraR0BatchSize = 1000
iterationStride = 1000
targetDaysPerRecord = 7
totalSamples = 0
data(WestAfricaEbola)
dat = WestAfricaEbola
names(dat)
charDate = as.character(dat[,1])
rptDate = as.Date(charDate, "%m/%d/%Y")
numDays = max(rptDate) - min(rptDate)
numDays.pred = numDays + pred.days
original.rptDate = rptDate
ascendingOrder = order(rptDate)
rptDate = rptDate[ascendingOrder]
original.rptDate = original.rptDate[ascendingOrder]
names(WestAfricaEbola)
dat = WestAfricaEbola[,c(1, 3,4,5)]
charDate = as.character(dat[,1])
rptDate = as.Date(charDate, "%m/%d/%Y")
numDays = max(rptDate) - min(rptDate)
numDays.pred = numDays + pred.days
original.rptDate = rptDate
ascendingOrder = order(rptDate)
rptDate = rptDate[ascendingOrder]
original.rptDate = original.rptDate[ascendingOrder]
cleanData = function(dataColumn, ascendingOrder)
{
# Remove commas
charCol = as.character(dataColumn)[ascendingOrder]
if (is.na(charCol[1]))
{
charCol[1] = "0"
}
charCol = as.numeric(charCol)
for (i in 2:length(charCol))
{
if (is.na(charCol[i]))
{
charCol[i] = charCol[i-1]
}
}
# charCol
# Correct for undercounts
for (i in seq(length(charCol), 2))
{
if (charCol[i-1] > charCol[i])
{
charCol[i-1] = charCol[i]
}
}
charCol
}
Guinea = cleanData(dat[,2], ascendingOrder)
Liberia = cleanData(dat[,3], ascendingOrder)
Sierra.Leone = cleanData(dat[,4], ascendingOrder)
rawData = cbind(Guinea, Sierra.Leone, Liberia)
rownames(rawData) = as.character(original.rptDate)
colnames(rawData) = paste(paste("&nbsp;&nbsp;", c("Guinea", "Liberia", "Sierra Leone")), "&nbsp;&nbsp;")
head(Sierra.Leone)
Sierra.Leone
# The data needs to be aggregated: there's some error in the measurements,
# and we're not actually observing infection times. The data is therefore
# recorded at an artifically high time scale.
uncumulate = function(x)
{
out = c(x[2:length(x)]-x[1:(length(x)-1)])
ifelse(out >= 0, out, 0)
}
nDays = uncumulate(original.rptDate)
thinIndices = function(minDays, weights)
{
keepIdx = c(length(weights))
currentWeight = 0
lastIdx = -1
for (i in seq(length(weights)-1, 1))
{
currentWeight = currentWeight + weights[i]
if (currentWeight >= minDays)
{
currentWeight = 0
keepIdx = c(keepIdx, i)
lastIdx = i
}
}
if (currentWeight != 0)
{
keepIdx = c(keepIdx, lastIdx-1)
}
keepIdx
}
keepIdx = thinIndices(targetDaysPerRecord, c(nDays,1))
keepIdx = keepIdx[order(keepIdx)]
Guinea = Guinea[keepIdx]
Sierra.Leone = Sierra.Leone[keepIdx]
Liberia = Liberia[keepIdx]
Sierra.Leone
original.rptDate = original.rptDate[keepIdx]
rptDate = original.rptDate[2:length(original.rptDate)]
I_star = cbind(uncumulate(Guinea),
uncumulate(Liberia),
uncumulate(Sierra.Leone))
I0 = c(Guinea[1], Liberia[1], Sierra.Leone[1])
I_star
length(rptDate)
cbind(rptDate, I_star)
cbind(as.character(rptDate), I_star)
